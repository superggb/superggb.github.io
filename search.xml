<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初探Redis</title>
      <link href="/2018/08/28/%E5%88%9D%E6%8E%A2Redis/"/>
      <url>/2018/08/28/%E5%88%9D%E6%8E%A2Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>redis是一种特殊类型的数据库，采用键值对形式存储数据，是一个不错的持久化缓存系统，之前写的一个SSM练习项目使用了mysql作为数据持久化方案，但是，对于一些重复的固定内容访问，每一次从查询指令到从数据库取值，这种不必要的步骤总显得有些碍眼，于是我选择使用redis作为中间的过渡方案。于是，便有了我redis的初体验之旅，之中踩坑无数，真是刚填平一个又踏入另一个。而且在网上查找了无数资源，翻阅了数不清的博客后，真的没有发现一篇全面的redis入门指南，于是便有了这篇文章的诞生，总结记录这一路的坑~</p><p>–</p><h2 id="一-下载和安装"><a href="#一-下载和安装" class="headerlink" title="一.下载和安装"></a>一.下载和安装</h2><p>本来是在本地测试项目的，所以一开始打算就在自己电脑上装好redis进行试验，于是到了官网：<br><a href="https://imgchr.com/i/POp0gg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/28/POp0gg.md.png" alt="POp0gg.md.png"></a><br>选择stable版本，download,下载好是个.tar.gz文件，之后在windows命令窗口搞鼓了一阵，发现别人的安装指令怎么输入都不起作用，仔细观察后，人家的指令运行的都是.exe文件，我在解压后的目录找到指令都是未知文件类型。。。 后来才发现，官网只提供linux版本的下载，，瞬间就觉得这官网不给版本选择真是巨坑。</p><p>于是，干脆直接装到服务器上，以后其他项目什么也可以用一下，直接把下载的压缩包拖到服务器。发现download页面有安装说明：<br><a href="https://imgchr.com/i/PO9CVI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/28/PO9CVI.md.png" alt="PO9CVI.md.png"></a><br>基本照做便OK了，由于redis是用C语言编写的（安装需要gcc环境），所有整个过程看似十分简单。但是这里使用的是默认配置，到真正能正常使用，还有很多东西需要自己配置。</p><h2 id="二-配置Redis"><a href="#二-配置Redis" class="headerlink" title="二.配置Redis"></a>二.配置Redis</h2><p>redis的基本配置都是放在根目录的redis.conf文件里面，通过src目录下的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># redis-server</span><br></pre></td></tr></table></figure><p>只是按默认配置启动，在centos上这种启动是前台式的启动，即启动后你不能进行其他操作，这肯定是不行的，所以还得自己去手动配置，</p><h3 id="1-修改后台启动模式"><a href="#1-修改后台启动模式" class="headerlink" title="1.修改后台启动模式"></a>1.修改后台启动模式</h3><p>通过 <em>vim redis-conf</em> 进行配置文件的编辑，修改其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># By default Redis does not run as a daemon. Use &apos;yes&apos; if you need it.</span><br><span class="line"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span><br><span class="line"></span><br><span class="line">daemonize no</span><br></pre></td></tr></table></figure><p>daemonize 为yes,即让redis以后台进程模式启动</p><h3 id="2-设置密码"><a href="#2-设置密码" class="headerlink" title="2.设置密码"></a>2.设置密码</h3><p>redis默认是没有密码的，启动后可直接访问，所以需要进行密码设置找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#requirepass foobared</span><br></pre></td></tr></table></figure><p>将注释去掉，再把foobared改为自己的密码即可。</p><p>此时，在 redis目录下，在 <em>/src</em> 下执行 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /redis.conf的路径</span><br></pre></td></tr></table></figure><p>即可按redis.conf进行启动。<br>此时在 src目录下，以 <em>redis-cli -a “password”</em> 即可登录redis服务。</p><h3 id="3-设置为开机启动"><a href="#3-设置为开机启动" class="headerlink" title="3.设置为开机启动"></a>3.设置为开机启动</h3><p>因为我发现redis的命令集中并没有方便的关闭和重启指令，于是，将其配置为后台服务。</p><p>1)在/etc目录下创建redis目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ggb etc]# mkdir redis</span><br></pre></td></tr></table></figure><p>2)将原来的redis.conf拷贝到该目录下,并命名为6379.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ggb etc]# cp /usr/local/redis-4.0.11/redis.conf /etc/redis/6379.conf</span><br></pre></td></tr></table></figure><p>3)将redis的启动脚本复制一份到/etc/init.d目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ggb etc]#cp /usr/local/redis-4.0.11/utils/redis_init_script /etc/init.d/redisd</span><br></pre></td></tr></table></figure><p>4)设置开机自启，先切换到/etc/init.d目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ggb init.d]# chkconfig redisd on</span><br></pre></td></tr></table></figure><p>此时便完成了自启配置，同时也可以以服务的方式启动和关闭redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ggb src]# service redisd start</span><br><span class="line">Starting Redis server...</span><br><span class="line">24448:C 28 Aug 17:00:50.328 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">24448:C 28 Aug 17:00:50.328 # Redis version=4.0.11, bits=64, commit=00000000, modified=0, pid=24448, just started</span><br><span class="line">24448:C 28 Aug 17:00:50.328 # Configuration loaded</span><br></pre></td></tr></table></figure><p>然后关闭指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@ggb src]#service redisd stop</span><br><span class="line">Stopping ...</span><br><span class="line">OK</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">Waiting for Redis to shutdown ...</span><br><span class="line">Waiting for Redis to shutdown ...</span><br><span class="line">Waiting for Redis to shutdown ...</span><br><span class="line">Waiting for Redis to shutdown ...</span><br><span class="line">Waiting for Redis to shutdown ...</span><br></pre></td></tr></table></figure><p>嗯….又是一个坑，在配置了密码后，redis服务开启可直接开启，但是关闭又需要密码，于是进入启动模板文件redisd修改启动配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">stop)</span><br><span class="line">       if [ ! -f $PIDFILE ]</span><br><span class="line">       then</span><br><span class="line">               echo &quot;$PIDFILE does not exist, process is not running&quot;</span><br><span class="line">       else</span><br><span class="line">               PID=$(cat $PIDFILE)</span><br><span class="line">               echo &quot;Stopping ...&quot;</span><br><span class="line">               $CLIEXEC -a &quot;password&quot; -p $REDISPORT shutdown</span><br><span class="line">               while [ -x /proc/$&#123;PID&#125; ]</span><br><span class="line">               do</span><br><span class="line">                   echo &quot;Waiting for Redis to shutdown ...&quot;</span><br><span class="line">                   sleep 1</span><br><span class="line">               done</span><br><span class="line">               echo &quot;Redis stopped&quot;</span><br><span class="line">       fi</span><br><span class="line">       ;;</span><br></pre></td></tr></table></figure><p>在 <em>$CLIEXEC -p $REDISPORT shutdown</em> 一句中加上-a “password”，现在便可以直接通过 <em>service redisd stop</em> 指令关闭服务了。</p><h2 id="三-Jedis测试连接"><a href="#三-Jedis测试连接" class="headerlink" title="三.Jedis测试连接"></a>三.Jedis测试连接</h2><p>redis可以连接多种语言，jedis是其官方推荐的java连接api，写测试方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void testConection() &#123;</span><br><span class="line">       Jedis jedis = new Jedis(&quot;111.231.240.211&quot;);</span><br><span class="line">       System.out.println(&quot;Connection to server sucessfully&quot;);</span><br><span class="line">       // 查看服务是否运行</span><br><span class="line">       System.out.println(&quot;Server is running: &quot; + jedis.ping());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>结果当然没想象那么容易，返回报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: connect timed out</span><br></pre></td></tr></table></figure><p>嗯，仔细看看代码，没有输入密码，不过网上别人没输入密码报错是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis.clients.jedis.exceptions.JedisDataException: NOAUTH Authentication required.</span><br></pre></td></tr></table></figure><p>总感觉有地方配置可能还是出错的，于是又在网上到处找解决办法。</p><p>很久之后，无意间翻到一篇博客，redis还要手动开启远程访问….</p><p>#<em>vim 6379.conf</em> 继续修改配置文件，找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1</span><br></pre></td></tr></table></figure><p>嗯，redis的默认配置是绑定了127.0.0.1 ip的… 注释掉这句，通过这个功能可以实现redis指定ip访问，在某些时候其实还是挺有用的。然后再找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># When protected mode is on and if:</span><br><span class="line">#</span><br><span class="line"># 1) The server is not binding explicitly to a set of addresses using the</span><br><span class="line">#    &quot;bind&quot; directive.</span><br><span class="line"># 2) No password is configured.</span><br><span class="line">#</span><br><span class="line"># The server only accepts connections from clients connecting from the</span><br><span class="line"># IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span><br><span class="line"># sockets.</span><br><span class="line">#</span><br><span class="line"># By default protected mode is enabled. You should disable it only if</span><br><span class="line"># you are sure you want clients from other hosts to connect to Redis</span><br><span class="line"># even if no authentication is configured, nor a specific set of interfaces</span><br><span class="line"># are explicitly listed using the &quot;bind&quot; directive.</span><br><span class="line"></span><br><span class="line">protected-mode yes</span><br></pre></td></tr></table></figure><p>上面注释已经说的很清楚了，但保护模式开启时，如果没有密码设定，也没有绑定Ip,redis也会自动锁定访问ip。所以，设置为no。</p><p>再进行一波测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testConectionWithPassword() &#123;</span><br><span class="line">        Jedis jedis = new Jedis(&quot;111.231.240.211&quot;);</span><br><span class="line">        jedis.auth(&quot;password&quot;);</span><br><span class="line">        System.out.println(&quot;Connection to server sucessfully&quot;);</span><br><span class="line">        // 查看服务是否运行</span><br><span class="line">        System.out.println(&quot;Server is running: &quot; + jedis.ping());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>终于，测试通过了。</p><p><em>Connection to server sucessfully<br>Server is running: PONG</em></p><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>开始安装好redis本来以为很快就能用，开始我的缓存优化时，一连串的问题接踵而来。以至于耗费了我小半天的功夫才把这一堆配置给调通，之后便是redis的实践测试。有兴趣的可以前往我的github，查看seckill这一项目，里面有redis的实践应用。</p>]]></content>
      
      
      <categories>
          
          <category> GGB&#39;学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启SpringBoot的新世界</title>
      <link href="/2018/08/13/%E5%BC%80%E5%90%AFSpringBoot%E7%9A%84%E6%96%B0%E4%B8%96%E7%95%8C/"/>
      <url>/2018/08/13/%E5%BC%80%E5%90%AFSpringBoot%E7%9A%84%E6%96%B0%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<p>–<br>之前一直在折腾SSM框架，几番下来也算是对SpringMVC+Spring+Mybatis的基本使用逻辑和思路有了一些清晰的思路。框架的开发模式确实比传统的纯JavaBean和Servlet的开发更高效且结构更加清晰。但是，我也并未打算就此停住来享受SSM框架的便利。因为，在接触Spring框架之初，早已听说了Spring的另一个项目——SpringBoot,这是一个更加简洁高效框架。在阅读 <em>SpringInAction</em> 一书时，作者在最后便提出了SpringBoot,称其是一个改变游戏规则的产品，之所以放在全书最后是为了让读者能更好理解Spring，但是他也说了，或许在下一版的书中，我们将会在全书开篇就看见SpringBoot的身影。这也说明SpringBoot所拥有的无限潜力。</p><p>此篇博客是我第一次接触SpringBoot后的体会和学习总结，其主要内容源自于<a href="https://spring.io/guides/gs/rest-service/" target="_blank" rel="noopener">SpringBoot的官方文档开篇</a>。</p><h2 id="一-使用Spring-Initializr-快速搭建SpringBoot项目"><a href="#一-使用Spring-Initializr-快速搭建SpringBoot项目" class="headerlink" title="一.使用Spring Initializr 快速搭建SpringBoot项目"></a>一.使用Spring Initializr 快速搭建SpringBoot项目</h2><p>在Idea环境下，新建项目，选择Spring Initializr，直接点击next。</p><p><a href="https://imgchr.com/i/PWaYjK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/17/PWaYjK.md.png" alt="PWaYjK.md.png"></a></p><p>选择使用Mavean构建项目</p><p><a href="https://imgchr.com/i/PWaJc6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/17/PWaJc6.md.png" alt="PWaJc6.md.png"></a></p><p>选择Web项目，Idea会自动选择最新的SpringBoot版本，<br><a href="https://imgchr.com/i/PWaNnO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/17/PWaNnO.md.png" alt="PWaNnO.md.png"></a></p><p>自此，便创建好了一个完整配置的SpringBoot项目，观察其pom.xml文件，可以发现其已经引进相关的SpringBoot的配置。</p><h2 id="二-创建第一个RESTful-Web-Service"><a href="#二-创建第一个RESTful-Web-Service" class="headerlink" title="二.创建第一个RESTful Web Service"></a>二.创建第一个RESTful Web Service</h2><p>此次运行目标是通过一个HTTP GET REQUSET:</p><blockquote><p><a href="http://localhost:8080/greeting" target="_blank" rel="noopener">http://localhost:8080/greeting</a></p></blockquote><p>得到返回的json格式数据：</p><blockquote><p>{“id”:1,”content”:”Hello, World!”}</p></blockquote><p>也可以传递一个名为name的参数改变返回值：</p><blockquote><p><a href="http://localhost:8080/greeting?name=ggb" target="_blank" rel="noopener">http://localhost:8080/greeting?name=ggb</a></p></blockquote><blockquote><p>{“id”:1,”content”:”Hello, ggb!”}</p></blockquote><p>现在我们开始此项目的正式编码：</p><h3 id="1-创建一个名为hello的javabean"><a href="#1-创建一个名为hello的javabean" class="headerlink" title="1.创建一个名为hello的javabean"></a>1.创建一个名为hello的javabean</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class hello &#123;</span><br><span class="line">    private long id;</span><br><span class="line">    private String content;</span><br><span class="line"></span><br><span class="line">    public hello(long id, String content) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public long getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getContent() &#123;</span><br><span class="line">        return content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并实现其getter方法。</p><h3 id="2-创建Controller"><a href="#2-创建Controller" class="headerlink" title="2.创建Controller"></a>2.创建Controller</h3><p>创建一个名为GreetingController的Java类如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class GreetingController &#123;</span><br><span class="line">    private static final String template = &quot;Hello,%s!&quot;;</span><br><span class="line">    private final AtomicLong counter=new AtomicLong();</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/greeting&quot;)</span><br><span class="line">    public com.ggb.dao.hello greeting(@RequestParam(value=&quot;name&quot;,defaultValue = &quot;World&quot;)String name)&#123;</span><br><span class="line">        return new hello(counter.incrementAndGet(),String.format(template,name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，注解 <em>@RestController</em>为Spring4里的新注解，它包含了 <em> </em>@Controller<em> 和 </em>@ResponseBody* 两个注解的功能。</p><p><em>@ResqusetMapping</em> 同样表示映射地址为”/greeting”。</p><p><em>@RequestParam</em> 将请求参数与方法参数进行绑定，并设置默认值为”World”。</p><p>counter变量用于请求计数。如此便完成了Conroller的编码。</p><h3 id="3-运行SpringBoot"><a href="#3-运行SpringBoot" class="headerlink" title="3.运行SpringBoot"></a>3.运行SpringBoot</h3><p>刚完成项目构建时，我们便发现了SpringBoot已经自动给我们生成了一个方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <em>@SpringBootApplication</em> 注解囊括了一下所有功能：</p><ol><li><em>@Configuration</em> ，即声明为一个配置类</li><li><em>@EnableAutoConfiguration</em> ，告诉SpringBoot自动配置加载其他Beans，和相关设定。</li><li>类似于DispatcherServlet，此声明使得其拥有SpringMVC的拦截转发功能。</li><li><em>@ConponentScan</em> 告诉Spring寻找其他组件，配置和服务在当前包下，并查找Controllers</li></ol><p>于此，通过一个注解我们便完成了之前我们所需配置的一系列xml等的工作。需要前两个Java类放在main的同一个包下。</p><p>由于SpringBoot内置了tomcat容器，所以此时，只需要点击Application方法旁边的运行按钮，SpringBoot便可自动构建JAR文件，完成整个项目运行，并达到预期效果。当然，也可以通过传统方式，将整个项目打包成WAR文件再放置于第三方的容器运行。</p><h2 id="三-总结"><a href="#三-总结" class="headerlink" title="三.总结"></a>三.总结</h2><p>当第一次接触到SpringBoot，我便被其所带来的巨大的便利性所深深吸引。在此之前，即使框架给我们带来了结构性的设计模式，和各个类之间的关系解耦。但是，从dao层到service层，再到controller每一层结构所需要的配置都是比较繁杂的。所以，当接触到SpringBoot，其带来的喜悦和兴奋感是难以言喻的，它的出现是真正改变游戏规则的那个。以后，我也一定会对其进行深入的学习和探究的。</p><blockquote><p>本文为ggb学习总结笔记和感想，若有不足或错误，欢迎指正交流</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> GGB&#39;学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring_______SpringMVC的基本流程</title>
      <link href="/2018/08/08/Spring-SpringMVC%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/"/>
      <url>/2018/08/08/Spring-SpringMVC%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h1><p>说到SpringMVC可以先看下面这张图：</p><hr><p><a href="https://imgchr.com/i/PWa7vV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/17/PWa7vV.md.jpg" alt="PWa7vV.md.jpg"></a></p><hr><p>从这张图我们可以很清晰地看到SpringMVC作为Spring内嵌的MVC模块其整体的工作流程：</p><ol><li>用户向服务器发送请求，请求被Spring 的前端控制器DispatcherServlet截获。</li><li>DispatherServlet对请求URL(统一资源定位符)进行解析，得到URI(请求资源标志符)，然后根据该uri，调用HandlerMapping获得该Handler配置的所有相关的对象。</li><li>DispatcherServlet根据获得的Handler，选择一个合适的HandlerAdapter。</li><li>提取请求中的模型数据，开始执行Handler(Controller)。期间Spring会自动帮你做一些工作：</li></ol><ul><li>消息转换</li><li>数据转换</li><li>数据格式化</li><li>数据验证</li></ul><ol start="5"><li>Handler执行完成后，向DispatcherServlet返回一个ModelAndView对象，ModelAndView对象中应该包含视图名或视图名和模型</li><li>根据返回的ModelAndView对象，选择一个合适的ViewResolver（视图解析器）返回给DispatcherServlet.</li><li>ViewResolver结合Model和View来渲染视图</li><li>将视图结果返回客户端</li></ol><hr><p>为了更清晰直观的描述其在程序中所发挥的作用，我觉得我们可以结合springMVC的配置文件说起：</p><h1 id="第一部分-web-xml"><a href="#第一部分-web-xml" class="headerlink" title="第一部分 web.xml"></a>第一部分 web.xml</h1><p>作为一个JavaWeb项目，无论使用什么框架，其本质还是得归根到JSP,Servlet上来，而其根本的配置信息就是由web.xml所配置的。作为SpringMVC中的控制转发器DispatcherServlet其本质也是个负责拦截请求并转发的Servlet，所以使用SpringMVC的第一步便是在web.xml配置好DispatherServlet.看下面的代码(省略头文件)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">!-- 配置DispathcherServlet --&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">       &lt;!--加载配置文件路径--&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:spring/spring-*.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>如上便配置好了DispatherServlet,当然其中还有对springMVC本身的配置文件，以及之后spring与DAO层，service层的spring配置文件的路径说明也必须要添加到<init-param>…</init-param>之中去。</p><h1 id="第二部分-springmvc-config-xml"><a href="#第二部分-springmvc-config-xml" class="headerlink" title="第二部分 springmvc-config.xml"></a>第二部分 springmvc-config.xml</h1><p>这个文件配置的便是对springmvc的整体相关配置文件了，在 <em>SpringInAction</em> 一书中，作者推荐了采用java代码的方式对SpringMVC进行配置。</p><p>但就目前所流行的开发模式中，依然是采用.xml配置文件使配置与逻辑业务分离，我个人也更喜欢.xml的配置方式，但是在有些情况下，需要对不同地方按不同逻辑进行选择配置时，这时Java配置才展现出它的优点。</p><p>如下展示的是一个简单但可用的springmvc配置文件(文件名可以任取，只要在web.xml中配置好)，通过对其的解读，我们可见窥见一个完整的springmvc运作(头文件已省略)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置SpringMVC --&gt;</span><br><span class="line">    &lt;!-- 1：开启SpringMVC注解模式 --&gt;</span><br><span class="line">    &lt;!-- 简化配置：</span><br><span class="line">         （1）自动注册DefaultAnnotationHandlerMapping,AnnotationMethodHandlerAdapter</span><br><span class="line">         xml,json默认支持读写 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 2:静态资源默认servlet配置</span><br><span class="line">         1）加入对静态资源的处理：js,gif,png</span><br><span class="line">         2) 允许使用&quot;/&quot;做整体映射</span><br><span class="line">         --&gt;</span><br><span class="line">    &lt;mvc:default-servlet-handler/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 3:配置jsp 显示ViewResolver --&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 4.spring可以自动扫描base-package下面的包或子包的java文件，当扫描到spring相关的类时，可自动注册 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;controller&quot;/&gt;</span><br></pre></td></tr></table></figure><ol><li><a href="mvc:annotation-driven/" target="_blank" rel="noopener">mvc:annotation-driven/</a></li></ol><p>这条语句会自动注册RequestMappingHandlerMapping与RequestMappingHandlerAdapter两个Bean，这是SpringMVC为@COntrollers分发请求所必需的，并提供数据绑定支持，读写XML的支持(JAXB)和读写JSON的支持(默认Jackson)等功能。</p><p>大部分情况我们使用默认的配置即可，但如果想要修改一些默认，如利用非Jackson处理json数据时，就需要在<a href="mvc:annotation-driven" target="_blank" rel="noopener">mvc:annotation-driven</a>标签中进行修改。</p><ol start="2"><li><a href="mvc:default-servlet-handler/" target="_blank" rel="noopener">mvc:default-servlet-handler/</a></li></ol><p>该语句使用默认的Servlet来响应静态文件，因为在web.xml中使用了DispatcherServlet截获所有请求url,所以在请求引入静态文件，例如js的引用语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/ggb.js&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>DispatherServlet会将”/“看成请求路径而报错。所以需要加上该语句进行配置。</p><ol start="3"><li>ViewResolver的配置</li></ol><p>通过该项配置，当我们通过controller返回一个视图名时，会自动加上前缀prefix和后缀suffix，这样可以简化我们的代码编写。</p><ol start="4"><li>&lt;context:component-scan base-package=”controller”/&gt;</li></ol><p>通过该语句，我们可以扫描到controller包下我们所写的controller组件，进而进行映射控制</p><hr><p>把每一个组件配置完成后，我们便可以开始使用springmvc进行业务逻辑控制，下面列举一个小例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HelloWorldContoller&#123;</span><br><span class="line">    @RequestMapping(&quot;/helloworld&quot;)</span><br><span class="line">    public String helloWorld(Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;message&quot;,&quot;HelloWorld!&quot;);</span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里便完成了一个极其简单的控制器实例了，首先我们通过@Contoller注解告诉spring这是一个控制器组件，之后的@RequestMapping(“/helloworld”)则声明以下方法用于处理url中的xxxx/helloworld请求，而计算机能识别此路径的前提，当然也是因为我们在web.xml中所声明的对’/‘的映射，以及springmvc.config中开启扫描后的结果。</p><p>请求处理方法中可以带多种参数，而最重要的便是Model和ModelAndView参数了，在MVC框架中，控制器执行业务逻辑后产生模型数据(Model)，而视图(View)则用于渲染模型数据。</p><p>在上例中，我们想model中加入了参数”HelloWorld!”，当其返回”hello”时，便会被自动解析为 ‘/WEB-INF/jsp/hello.jsp’ 这也是我们所配置的ViewResolver的功劳。这样，当我们在hello.jsp页面中通过EL表达式便可取到messge的值”HelloWorld!”输出到页面上了。</p><p>此时再回顾我们开篇所给出的SpringMVC的流程图，通过这个么一个简单的例子，便实现了从拦截请求，控制器处理，数据模型建立，视图解析这一个整个MVC的过程！</p><p>当然，要实现更加复杂的程序功能，还有很多SpringMVC注解如：</p><ul><li>@PathVariable 对请求的参数进行映射</li><li>@CookieValue 处理请求中的Cookie值</li><li>@RequestBody 自动将json数据参数传化为对应Pojo</li><li>@Response 自动将结果pojo转化为json格式</li><li>等等</li></ul><p>想了解更为详细的配置方法和注解使用，可以去阅读<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web" target="_blank" rel="noopener">官方文档</a>，或者查看其他网络资源。</p><blockquote><p>本文为GGB学习过程中的笔记总结，欢迎各位的指正和交流。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> GGB&#39;学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>README</title>
      <link href="/2018/08/07/README/"/>
      <url>/2018/08/07/README/</url>
      
        <content type="html"><![CDATA[<h2 id="这里主要是博客的介绍说明："><a href="#这里主要是博客的介绍说明：" class="headerlink" title="这里主要是博客的介绍说明："></a>这里主要是博客的介绍说明：</h2><ol><li>用于存放个人学习笔记和记录（有不同意见可以交流）</li><li>存放一些个人随笔</li><li>存放一些个人收集的网络资源</li><li>提供一个公开交流的平台</li><li>也是作为网络前端的一个测试点，以后可能随时会改变博客样式风格</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HELLO WORLD</title>
      <link href="/2018/08/07/HELLO%20WORLD/"/>
      <url>/2018/08/07/HELLO%20WORLD/</url>
      
        <content type="html"><![CDATA[<p>相信每一个程序员的第一行代码输出就是helloworld吧， 无论是接触到一门新的编程语言还是搭建好一个新的软件环境。我想无论是哪位程序员，看到这两个单词时都会有种莫名的亲切感吧。</p><p>–</p><p>当我们亲手用一行一行代码去实现一个又一个功能，让我们的生活，让这个世界，变得更加方便和智能，我觉得这也是代码本身向这个世界的一种展示，当我们使用着互联网，智能手机，个人电脑，感受着这个信息时代的便利时，一行一行代码也穿梭其间，可以说，这是一个代码的时代，溯源到其始端，也正是从1972年<em>贝尔实验室</em>在其 <em>Introduction to the Language B</em> 使用hello world,作为程序第一个输出开始，代码开始向这个世界输出自己的力量。</p><p>–</p><p>所以，作为程序猿从某种意义上来说也是伟大的，我们用智慧写出一行行代码来构建这个世界，We are creating the world !</p><p>–</p><p>电影 <em>模仿游戏</em> 里面图灵有这样的说法，<em>“can mechaines think? just because they think diffently from us? ”</em> 当我们用代码构建一层层神经网络，企图让机器去自己思考，让机器去认识这个世界的时候，我们能否认其所输出的hello world不正是它向这个世界问好吗？当计算机在代码驱动下，能认识一朵花，一只猫或者一条狗的时候，这不正是人类婴儿时期，在懵懂中开始对世界产生认知吗？在我看来，机器像人类一样思考或者说能思考得像人类，it’s just a matter of time.</p><p>–</p><p>hello world 也是我搭建好这个博客后自动生成的文章标题，我觉得作为一个程序猿的博客，以hello world开头也是再好不过的了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Printf(&quot;hello world!&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GGB&#39;随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>乌合之众</title>
      <link href="/2018/01/03/%E3%80%8A%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
      <url>/2018/01/03/%E3%80%8A%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="hbe-security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 你觉得密码是什么？ " /> <label for="pass"> 你觉得密码是什么？ </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> GGB&#39;随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于GGB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菊与刀</title>
      <link href="/2018/01/03/%E3%80%8A%E8%8F%8A%E4%B8%8E%E5%88%80%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
      <url>/2018/01/03/%E3%80%8A%E8%8F%8A%E4%B8%8E%E5%88%80%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="hbe-security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 你觉得密码是什么？ " /> <label for="pass"> 你觉得密码是什么？ </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> GGB&#39;随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于GGB </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
  
</search>
