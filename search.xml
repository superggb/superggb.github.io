<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初探Redis</title>
      <link href="/2018/08/28/%E5%88%9D%E6%8E%A2Redis/"/>
      <url>/2018/08/28/%E5%88%9D%E6%8E%A2Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>redis是一种特殊类型的数据库，采用键值对形式存储数据，是一个不错的持久化缓存系统，之前写的一个SSM练习项目使用了mysql作为数据持久化方案，但是，对于一些重复的固定内容访问，每一次从查询指令到从数据库取值，这种不必要的步骤总显得有些碍眼，于是我选择使用redis作为中间的过渡方案。于是，便有了我redis的初体验之旅，之中踩坑无数，真是刚填平一个又踏入另一个。而且在网上查找了无数资源，翻阅了数不清的博客后，真的没有发现一篇全面的redis入门指南，于是便有了这篇文章的诞生，总结记录这一路的坑~</p><p>–</p><h2 id="一-下载和安装"><a href="#一-下载和安装" class="headerlink" title="一.下载和安装"></a>一.下载和安装</h2><p>本来是在本地测试项目的，所以一开始打算就在自己电脑上装好redis进行试验，于是到了官网：<br><a href="https://imgchr.com/i/POp0gg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/28/POp0gg.md.png" alt="POp0gg.md.png"></a><br>选择stable版本，download,下载好是个.tar.gz文件，之后在windows命令窗口搞鼓了一阵，发现别人的安装指令怎么输入都不起作用，仔细观察后，人家的指令运行的都是.exe文件，我在解压后的目录找到指令都是未知文件类型。。。 后来才发现，官网只提供linux版本的下载，，瞬间就觉得这官网不给版本选择真是巨坑。</p><p>于是，干脆直接装到服务器上，以后其他项目什么也可以用一下，直接把下载的压缩包拖到服务器。发现download页面有安装说明：<br><a href="https://imgchr.com/i/PO9CVI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/28/PO9CVI.md.png" alt="PO9CVI.md.png"></a><br>基本照做便OK了，由于redis是用C语言编写的（安装需要gcc环境），所有整个过程看似十分简单。但是这里使用的是默认配置，到真正能正常使用，还有很多东西需要自己配置。</p><h2 id="二-配置Redis"><a href="#二-配置Redis" class="headerlink" title="二.配置Redis"></a>二.配置Redis</h2><p>redis的基本配置都是放在根目录的redis.conf文件里面，通过src目录下的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># redis-server</span><br></pre></td></tr></table></figure><p>只是按默认配置启动，在centos上这种启动是前台式的启动，即启动后你不能进行其他操作，这肯定是不行的，所以还得自己去手动配置，</p><h3 id="1-修改后台启动模式"><a href="#1-修改后台启动模式" class="headerlink" title="1.修改后台启动模式"></a>1.修改后台启动模式</h3><p>通过 <em>vim redis-conf</em> 进行配置文件的编辑，修改其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># By default Redis does not run as a daemon. Use &apos;yes&apos; if you need it.</span><br><span class="line"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span><br><span class="line"></span><br><span class="line">daemonize no</span><br></pre></td></tr></table></figure><p>daemonize 为yes,即让redis以后台进程模式启动</p><h3 id="2-设置密码"><a href="#2-设置密码" class="headerlink" title="2.设置密码"></a>2.设置密码</h3><p>redis默认是没有密码的，启动后可直接访问，所以需要进行密码设置找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#requirepass foobared</span><br></pre></td></tr></table></figure><p>将注释去掉，再把foobared改为自己的密码即可。</p><p>此时，在 redis目录下，在 <em>/src</em> 下执行 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /redis.conf的路径</span><br></pre></td></tr></table></figure><p>即可按redis.conf进行启动。<br>此时在 src目录下，以 <em>redis-cli -a “password”</em> 即可登录redis服务。</p><h3 id="3-设置为开机启动"><a href="#3-设置为开机启动" class="headerlink" title="3.设置为开机启动"></a>3.设置为开机启动</h3><p>因为我发现redis的命令集中并没有方便的关闭和重启指令，于是，将其配置为后台服务。</p><p>1)在/etc目录下创建redis目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ggb etc]# mkdir redis</span><br></pre></td></tr></table></figure><p>2)将原来的redis.conf拷贝到该目录下,并命名为6379.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ggb etc]# cp /usr/local/redis-4.0.11/redis.conf /etc/redis/6379.conf</span><br></pre></td></tr></table></figure><p>3)将redis的启动脚本复制一份到/etc/init.d目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ggb etc]#cp /usr/local/redis-4.0.11/utils/redis_init_script /etc/init.d/redisd</span><br></pre></td></tr></table></figure><p>4)设置开机自启，先切换到/etc/init.d目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ggb init.d]# chkconfig redisd on</span><br></pre></td></tr></table></figure><p>此时便完成了自启配置，同时也可以以服务的方式启动和关闭redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ggb src]# service redisd start</span><br><span class="line">Starting Redis server...</span><br><span class="line">24448:C 28 Aug 17:00:50.328 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">24448:C 28 Aug 17:00:50.328 # Redis version=4.0.11, bits=64, commit=00000000, modified=0, pid=24448, just started</span><br><span class="line">24448:C 28 Aug 17:00:50.328 # Configuration loaded</span><br></pre></td></tr></table></figure><p>然后关闭指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@ggb src]#service redisd stop</span><br><span class="line">Stopping ...</span><br><span class="line">OK</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">Waiting for Redis to shutdown ...</span><br><span class="line">Waiting for Redis to shutdown ...</span><br><span class="line">Waiting for Redis to shutdown ...</span><br><span class="line">Waiting for Redis to shutdown ...</span><br><span class="line">Waiting for Redis to shutdown ...</span><br></pre></td></tr></table></figure><p>嗯….又是一个坑，在配置了密码后，redis服务开启可直接开启，但是关闭又需要密码，于是进入启动模板文件redisd修改启动配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">stop)</span><br><span class="line">       if [ ! -f $PIDFILE ]</span><br><span class="line">       then</span><br><span class="line">               echo &quot;$PIDFILE does not exist, process is not running&quot;</span><br><span class="line">       else</span><br><span class="line">               PID=$(cat $PIDFILE)</span><br><span class="line">               echo &quot;Stopping ...&quot;</span><br><span class="line">               $CLIEXEC -a &quot;password&quot; -p $REDISPORT shutdown</span><br><span class="line">               while [ -x /proc/$&#123;PID&#125; ]</span><br><span class="line">               do</span><br><span class="line">                   echo &quot;Waiting for Redis to shutdown ...&quot;</span><br><span class="line">                   sleep 1</span><br><span class="line">               done</span><br><span class="line">               echo &quot;Redis stopped&quot;</span><br><span class="line">       fi</span><br><span class="line">       ;;</span><br></pre></td></tr></table></figure><p>在 <em>$CLIEXEC -p $REDISPORT shutdown</em> 一句中加上-a “password”，现在便可以直接通过 <em>service redisd stop</em> 指令关闭服务了。</p><h2 id="三-Jedis测试连接"><a href="#三-Jedis测试连接" class="headerlink" title="三.Jedis测试连接"></a>三.Jedis测试连接</h2><p>redis可以连接多种语言，jedis是其官方推荐的java连接api，写测试方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void testConection() &#123;</span><br><span class="line">       Jedis jedis = new Jedis(&quot;111.231.240.211&quot;);</span><br><span class="line">       System.out.println(&quot;Connection to server sucessfully&quot;);</span><br><span class="line">       // 查看服务是否运行</span><br><span class="line">       System.out.println(&quot;Server is running: &quot; + jedis.ping());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>结果当然没想象那么容易，返回报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: connect timed out</span><br></pre></td></tr></table></figure><p>嗯，仔细看看代码，没有输入密码，不过网上别人没输入密码报错是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis.clients.jedis.exceptions.JedisDataException: NOAUTH Authentication required.</span><br></pre></td></tr></table></figure><p>总感觉有地方配置可能还是出错的，于是又在网上到处找解决办法。</p><p>很久之后，无意间翻到一篇博客，redis还要手动开启远程访问….</p><p>#<em>vim 6379.conf</em> 继续修改配置文件，找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1</span><br></pre></td></tr></table></figure><p>嗯，redis的默认配置是绑定了127.0.0.1 ip的… 注释掉这句，通过这个功能可以实现redis指定ip访问，在某些时候其实还是挺有用的。然后再找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># When protected mode is on and if:</span><br><span class="line">#</span><br><span class="line"># 1) The server is not binding explicitly to a set of addresses using the</span><br><span class="line">#    &quot;bind&quot; directive.</span><br><span class="line"># 2) No password is configured.</span><br><span class="line">#</span><br><span class="line"># The server only accepts connections from clients connecting from the</span><br><span class="line"># IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span><br><span class="line"># sockets.</span><br><span class="line">#</span><br><span class="line"># By default protected mode is enabled. You should disable it only if</span><br><span class="line"># you are sure you want clients from other hosts to connect to Redis</span><br><span class="line"># even if no authentication is configured, nor a specific set of interfaces</span><br><span class="line"># are explicitly listed using the &quot;bind&quot; directive.</span><br><span class="line"></span><br><span class="line">protected-mode yes</span><br></pre></td></tr></table></figure><p>上面注释已经说的很清楚了，但保护模式开启时，如果没有密码设定，也没有绑定Ip,redis也会自动锁定访问ip。所以，设置为no。</p><p>再进行一波测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testConectionWithPassword() &#123;</span><br><span class="line">        Jedis jedis = new Jedis(&quot;111.231.240.211&quot;);</span><br><span class="line">        jedis.auth(&quot;password&quot;);</span><br><span class="line">        System.out.println(&quot;Connection to server sucessfully&quot;);</span><br><span class="line">        // 查看服务是否运行</span><br><span class="line">        System.out.println(&quot;Server is running: &quot; + jedis.ping());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>终于，测试通过了。</p><p><em>Connection to server sucessfully<br>Server is running: PONG</em></p><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>开始安装好redis本来以为很快就能用，开始我的缓存优化时，一连串的问题接踵而来。以至于耗费了我小半天的功夫才把这一堆配置给调通，之后便是redis的实践测试。有兴趣的可以前往我的github，查看seckill这一项目，里面有redis的实践应用。</p>]]></content>
      
      
      <categories>
          
          <category> GGB&#39;学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启SpringBoot的新世界</title>
      <link href="/2018/08/13/%E5%BC%80%E5%90%AFSpringBoot%E7%9A%84%E6%96%B0%E4%B8%96%E7%95%8C/"/>
      <url>/2018/08/13/%E5%BC%80%E5%90%AFSpringBoot%E7%9A%84%E6%96%B0%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<p>–<br>之前一直在折腾SSM框架，几番下来也算是对SpringMVC+Spring+Mybatis的基本使用逻辑和思路有了一些清晰的思路。框架的开发模式确实比传统的纯JavaBean和Servlet的开发更高效且结构更加清晰。但是，我也并未打算就此停住来享受SSM框架的便利。因为，在接触Spring框架之初，早已听说了Spring的另一个项目——SpringBoot,这是一个更加简洁高效框架。在阅读 <em>SpringInAction</em> 一书时，作者在最后便提出了SpringBoot,称其是一个改变游戏规则的产品，之所以放在全书最后是为了让读者能更好理解Spring，但是他也说了，或许在下一版的书中，我们将会在全书开篇就看见SpringBoot的身影。这也说明SpringBoot所拥有的无限潜力。</p><p>此篇博客是我第一次接触SpringBoot后的体会和学习总结，其主要内容源自于<a href="https://spring.io/guides/gs/rest-service/" target="_blank" rel="noopener">SpringBoot的官方文档开篇</a>。</p><h2 id="一-使用Spring-Initializr-快速搭建SpringBoot项目"><a href="#一-使用Spring-Initializr-快速搭建SpringBoot项目" class="headerlink" title="一.使用Spring Initializr 快速搭建SpringBoot项目"></a>一.使用Spring Initializr 快速搭建SpringBoot项目</h2><p>在Idea环境下，新建项目，选择Spring Initializr，直接点击next。</p><p><a href="https://imgchr.com/i/PWaYjK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/17/PWaYjK.md.png" alt="PWaYjK.md.png"></a></p><p>选择使用Mavean构建项目</p><p><a href="https://imgchr.com/i/PWaJc6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/17/PWaJc6.md.png" alt="PWaJc6.md.png"></a></p><p>选择Web项目，Idea会自动选择最新的SpringBoot版本，<br><a href="https://imgchr.com/i/PWaNnO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/17/PWaNnO.md.png" alt="PWaNnO.md.png"></a></p><p>自此，便创建好了一个完整配置的SpringBoot项目，观察其pom.xml文件，可以发现其已经引进相关的SpringBoot的配置。</p><h2 id="二-创建第一个RESTful-Web-Service"><a href="#二-创建第一个RESTful-Web-Service" class="headerlink" title="二.创建第一个RESTful Web Service"></a>二.创建第一个RESTful Web Service</h2><p>此次运行目标是通过一个HTTP GET REQUSET:</p><blockquote><p><a href="http://localhost:8080/greeting" target="_blank" rel="noopener">http://localhost:8080/greeting</a></p></blockquote><p>得到返回的json格式数据：</p><blockquote><p>{“id”:1,”content”:”Hello, World!”}</p></blockquote><p>也可以传递一个名为name的参数改变返回值：</p><blockquote><p><a href="http://localhost:8080/greeting?name=ggb" target="_blank" rel="noopener">http://localhost:8080/greeting?name=ggb</a></p></blockquote><blockquote><p>{“id”:1,”content”:”Hello, ggb!”}</p></blockquote><p>现在我们开始此项目的正式编码：</p><h3 id="1-创建一个名为hello的javabean"><a href="#1-创建一个名为hello的javabean" class="headerlink" title="1.创建一个名为hello的javabean"></a>1.创建一个名为hello的javabean</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class hello &#123;</span><br><span class="line">    private long id;</span><br><span class="line">    private String content;</span><br><span class="line"></span><br><span class="line">    public hello(long id, String content) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public long getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getContent() &#123;</span><br><span class="line">        return content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并实现其getter方法。</p><h3 id="2-创建Controller"><a href="#2-创建Controller" class="headerlink" title="2.创建Controller"></a>2.创建Controller</h3><p>创建一个名为GreetingController的Java类如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class GreetingController &#123;</span><br><span class="line">    private static final String template = &quot;Hello,%s!&quot;;</span><br><span class="line">    private final AtomicLong counter=new AtomicLong();</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/greeting&quot;)</span><br><span class="line">    public com.ggb.dao.hello greeting(@RequestParam(value=&quot;name&quot;,defaultValue = &quot;World&quot;)String name)&#123;</span><br><span class="line">        return new hello(counter.incrementAndGet(),String.format(template,name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，注解 <em>@RestController</em>为Spring4里的新注解，它包含了 <em> </em>@Controller<em> 和 </em>@ResponseBody* 两个注解的功能。</p><p><em>@ResqusetMapping</em> 同样表示映射地址为”/greeting”。</p><p><em>@RequestParam</em> 将请求参数与方法参数进行绑定，并设置默认值为”World”。</p><p>counter变量用于请求计数。如此便完成了Conroller的编码。</p><h3 id="3-运行SpringBoot"><a href="#3-运行SpringBoot" class="headerlink" title="3.运行SpringBoot"></a>3.运行SpringBoot</h3><p>刚完成项目构建时，我们便发现了SpringBoot已经自动给我们生成了一个方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <em>@SpringBootApplication</em> 注解囊括了一下所有功能：</p><ol><li><em>@Configuration</em> ，即声明为一个配置类</li><li><em>@EnableAutoConfiguration</em> ，告诉SpringBoot自动配置加载其他Beans，和相关设定。</li><li>类似于DispatcherServlet，此声明使得其拥有SpringMVC的拦截转发功能。</li><li><em>@ConponentScan</em> 告诉Spring寻找其他组件，配置和服务在当前包下，并查找Controllers</li></ol><p>于此，通过一个注解我们便完成了之前我们所需配置的一系列xml等的工作。需要前两个Java类放在main的同一个包下。</p><p>由于SpringBoot内置了tomcat容器，所以此时，只需要点击Application方法旁边的运行按钮，SpringBoot便可自动构建JAR文件，完成整个项目运行，并达到预期效果。当然，也可以通过传统方式，将整个项目打包成WAR文件再放置于第三方的容器运行。</p><h2 id="三-总结"><a href="#三-总结" class="headerlink" title="三.总结"></a>三.总结</h2><p>当第一次接触到SpringBoot，我便被其所带来的巨大的便利性所深深吸引。在此之前，即使框架给我们带来了结构性的设计模式，和各个类之间的关系解耦。但是，从dao层到service层，再到controller每一层结构所需要的配置都是比较繁杂的。所以，当接触到SpringBoot，其带来的喜悦和兴奋感是难以言喻的，它的出现是真正改变游戏规则的那个。以后，我也一定会对其进行深入的学习和探究的。</p><blockquote><p>本文为ggb学习总结笔记和感想，若有不足或错误，欢迎指正交流</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> GGB&#39;学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring_______SpringMVC的基本流程</title>
      <link href="/2018/08/08/Spring-SpringMVC%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/"/>
      <url>/2018/08/08/Spring-SpringMVC%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h1><p>说到SpringMVC可以先看下面这张图：</p><hr><p><a href="https://imgchr.com/i/PWa7vV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/17/PWa7vV.md.jpg" alt="PWa7vV.md.jpg"></a></p><hr><p>从这张图我们可以很清晰地看到SpringMVC作为Spring内嵌的MVC模块其整体的工作流程：</p><ol><li>用户向服务器发送请求，请求被Spring 的前端控制器DispatcherServlet截获。</li><li>DispatherServlet对请求URL(统一资源定位符)进行解析，得到URI(请求资源标志符)，然后根据该uri，调用HandlerMapping获得该Handler配置的所有相关的对象。</li><li>DispatcherServlet根据获得的Handler，选择一个合适的HandlerAdapter。</li><li>提取请求中的模型数据，开始执行Handler(Controller)。期间Spring会自动帮你做一些工作：</li></ol><ul><li>消息转换</li><li>数据转换</li><li>数据格式化</li><li>数据验证</li></ul><ol start="5"><li>Handler执行完成后，向DispatcherServlet返回一个ModelAndView对象，ModelAndView对象中应该包含视图名或视图名和模型</li><li>根据返回的ModelAndView对象，选择一个合适的ViewResolver（视图解析器）返回给DispatcherServlet.</li><li>ViewResolver结合Model和View来渲染视图</li><li>将视图结果返回客户端</li></ol><hr><p>为了更清晰直观的描述其在程序中所发挥的作用，我觉得我们可以结合springMVC的配置文件说起：</p><h1 id="第一部分-web-xml"><a href="#第一部分-web-xml" class="headerlink" title="第一部分 web.xml"></a>第一部分 web.xml</h1><p>作为一个JavaWeb项目，无论使用什么框架，其本质还是得归根到JSP,Servlet上来，而其根本的配置信息就是由web.xml所配置的。作为SpringMVC中的控制转发器DispatcherServlet其本质也是个负责拦截请求并转发的Servlet，所以使用SpringMVC的第一步便是在web.xml配置好DispatherServlet.看下面的代码(省略头文件)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">!-- 配置DispathcherServlet --&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">       &lt;!--加载配置文件路径--&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:spring/spring-*.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>如上便配置好了DispatherServlet,当然其中还有对springMVC本身的配置文件，以及之后spring与DAO层，service层的spring配置文件的路径说明也必须要添加到<init-param>…</init-param>之中去。</p><h1 id="第二部分-springmvc-config-xml"><a href="#第二部分-springmvc-config-xml" class="headerlink" title="第二部分 springmvc-config.xml"></a>第二部分 springmvc-config.xml</h1><p>这个文件配置的便是对springmvc的整体相关配置文件了，在 <em>SpringInAction</em> 一书中，作者推荐了采用java代码的方式对SpringMVC进行配置。</p><p>但就目前所流行的开发模式中，依然是采用.xml配置文件使配置与逻辑业务分离，我个人也更喜欢.xml的配置方式，但是在有些情况下，需要对不同地方按不同逻辑进行选择配置时，这时Java配置才展现出它的优点。</p><p>如下展示的是一个简单但可用的springmvc配置文件(文件名可以任取，只要在web.xml中配置好)，通过对其的解读，我们可见窥见一个完整的springmvc运作(头文件已省略)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置SpringMVC --&gt;</span><br><span class="line">    &lt;!-- 1：开启SpringMVC注解模式 --&gt;</span><br><span class="line">    &lt;!-- 简化配置：</span><br><span class="line">         （1）自动注册DefaultAnnotationHandlerMapping,AnnotationMethodHandlerAdapter</span><br><span class="line">         xml,json默认支持读写 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 2:静态资源默认servlet配置</span><br><span class="line">         1）加入对静态资源的处理：js,gif,png</span><br><span class="line">         2) 允许使用&quot;/&quot;做整体映射</span><br><span class="line">         --&gt;</span><br><span class="line">    &lt;mvc:default-servlet-handler/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 3:配置jsp 显示ViewResolver --&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 4.spring可以自动扫描base-package下面的包或子包的java文件，当扫描到spring相关的类时，可自动注册 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;controller&quot;/&gt;</span><br></pre></td></tr></table></figure><ol><li><a href="mvc:annotation-driven/" target="_blank" rel="noopener">mvc:annotation-driven/</a></li></ol><p>这条语句会自动注册RequestMappingHandlerMapping与RequestMappingHandlerAdapter两个Bean，这是SpringMVC为@COntrollers分发请求所必需的，并提供数据绑定支持，读写XML的支持(JAXB)和读写JSON的支持(默认Jackson)等功能。</p><p>大部分情况我们使用默认的配置即可，但如果想要修改一些默认，如利用非Jackson处理json数据时，就需要在<a href="mvc:annotation-driven" target="_blank" rel="noopener">mvc:annotation-driven</a>标签中进行修改。</p><ol start="2"><li><a href="mvc:default-servlet-handler/" target="_blank" rel="noopener">mvc:default-servlet-handler/</a></li></ol><p>该语句使用默认的Servlet来响应静态文件，因为在web.xml中使用了DispatcherServlet截获所有请求url,所以在请求引入静态文件，例如js的引用语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/ggb.js&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>DispatherServlet会将”/“看成请求路径而报错。所以需要加上该语句进行配置。</p><ol start="3"><li>ViewResolver的配置</li></ol><p>通过该项配置，当我们通过controller返回一个视图名时，会自动加上前缀prefix和后缀suffix，这样可以简化我们的代码编写。</p><ol start="4"><li>&lt;context:component-scan base-package=”controller”/&gt;</li></ol><p>通过该语句，我们可以扫描到controller包下我们所写的controller组件，进而进行映射控制</p><hr><p>把每一个组件配置完成后，我们便可以开始使用springmvc进行业务逻辑控制，下面列举一个小例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HelloWorldContoller&#123;</span><br><span class="line">    @RequestMapping(&quot;/helloworld&quot;)</span><br><span class="line">    public String helloWorld(Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;message&quot;,&quot;HelloWorld!&quot;);</span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里便完成了一个极其简单的控制器实例了，首先我们通过@Contoller注解告诉spring这是一个控制器组件，之后的@RequestMapping(“/helloworld”)则声明以下方法用于处理url中的xxxx/helloworld请求，而计算机能识别此路径的前提，当然也是因为我们在web.xml中所声明的对’/‘的映射，以及springmvc.config中开启扫描后的结果。</p><p>请求处理方法中可以带多种参数，而最重要的便是Model和ModelAndView参数了，在MVC框架中，控制器执行业务逻辑后产生模型数据(Model)，而视图(View)则用于渲染模型数据。</p><p>在上例中，我们想model中加入了参数”HelloWorld!”，当其返回”hello”时，便会被自动解析为 ‘/WEB-INF/jsp/hello.jsp’ 这也是我们所配置的ViewResolver的功劳。这样，当我们在hello.jsp页面中通过EL表达式便可取到messge的值”HelloWorld!”输出到页面上了。</p><p>此时再回顾我们开篇所给出的SpringMVC的流程图，通过这个么一个简单的例子，便实现了从拦截请求，控制器处理，数据模型建立，视图解析这一个整个MVC的过程！</p><p>当然，要实现更加复杂的程序功能，还有很多SpringMVC注解如：</p><ul><li>@PathVariable 对请求的参数进行映射</li><li>@CookieValue 处理请求中的Cookie值</li><li>@RequestBody 自动将json数据参数传化为对应Pojo</li><li>@Response 自动将结果pojo转化为json格式</li><li>等等</li></ul><p>想了解更为详细的配置方法和注解使用，可以去阅读<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web" target="_blank" rel="noopener">官方文档</a>，或者查看其他网络资源。</p><blockquote><p>本文为GGB学习过程中的笔记总结，欢迎各位的指正和交流。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> GGB&#39;学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>README</title>
      <link href="/2018/08/07/README/"/>
      <url>/2018/08/07/README/</url>
      
        <content type="html"><![CDATA[<h2 id="这里主要是博客的介绍说明："><a href="#这里主要是博客的介绍说明：" class="headerlink" title="这里主要是博客的介绍说明："></a>这里主要是博客的介绍说明：</h2><ol><li>用于存放个人学习笔记和记录（有不同意见可以交流）</li><li>存放一些个人随笔</li><li>存放一些个人收集的网络资源</li><li>提供一个公开交流的平台</li><li>也是作为网络前端的一个测试点，以后可能随时会改变博客样式风格</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HELLO WORLD</title>
      <link href="/2018/08/07/HELLO%20WORLD/"/>
      <url>/2018/08/07/HELLO%20WORLD/</url>
      
        <content type="html"><![CDATA[<p>相信每一个程序员的第一行代码输出就是helloworld吧， 无论是接触到一门新的编程语言还是搭建好一个新的软件环境。我想无论是哪位程序员，看到这两个单词时都会有种莫名的亲切感吧。</p><p>–</p><p>当我们亲手用一行一行代码去实现一个又一个功能，让我们的生活，让这个世界，变得更加方便和智能，我觉得这也是代码本身向这个世界的一种展示，当我们使用着互联网，智能手机，个人电脑，感受着这个信息时代的便利时，一行一行代码也穿梭其间，可以说，这是一个代码的时代，溯源到其始端，也正是从1972年<em>贝尔实验室</em>在其 <em>Introduction to the Language B</em> 使用hello world,作为程序第一个输出开始，代码开始向这个世界输出自己的力量。</p><p>–</p><p>所以，作为程序猿从某种意义上来说也是伟大的，我们用智慧写出一行行代码来构建这个世界，We are creating the world !</p><p>–</p><p>电影 <em>模仿游戏</em> 里面图灵有这样的说法，<em>“can mechaines think? just because they think diffently from us? ”</em> 当我们用代码构建一层层神经网络，企图让机器去自己思考，让机器去认识这个世界的时候，我们能否认其所输出的hello world不正是它向这个世界问好吗？当计算机在代码驱动下，能认识一朵花，一只猫或者一条狗的时候，这不正是人类婴儿时期，在懵懂中开始对世界产生认知吗？在我看来，机器像人类一样思考或者说能思考得像人类，it’s just a matter of time.</p><p>–</p><p>hello world 也是我搭建好这个博客后自动生成的文章标题，我觉得作为一个程序猿的博客，以hello world开头也是再好不过的了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Printf(&quot;hello world!&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GGB&#39;随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>人间失格</title>
      <link href="/2018/01/17/%E3%80%8A%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
      <url>/2018/01/17/%E3%80%8A%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="hbe-security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 你觉得密码是什么？ " /> <label for="pass"> 你觉得密码是什么？ </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> GGB&#39;随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于GGB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乌合之众</title>
      <link href="/2018/01/03/%E3%80%8A%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
      <url>/2018/01/03/%E3%80%8A%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="hbe-security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 你觉得密码是什么？ " /> <label for="pass"> 你觉得密码是什么？ </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> GGB&#39;随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于GGB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菊与刀</title>
      <link href="/2018/01/03/%E3%80%8A%E8%8F%8A%E4%B8%8E%E5%88%80%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
      <url>/2018/01/03/%E3%80%8A%E8%8F%8A%E4%B8%8E%E5%88%80%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="hbe-security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 你觉得密码是什么？ " /> <label for="pass"> 你觉得密码是什么？ </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> GGB&#39;随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于GGB </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
  
</search>
